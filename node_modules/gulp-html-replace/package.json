{
  "name": "gulp-html-replace",
  "version": "1.4.5",
  "description": "Replace build blocks in HTML. Like useref but done right.",
  "keywords": [
    "gulpplugin",
    "html",
    "replace"
  ],
  "files": [
    "lib"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/VFK/gulp-html-replace.git"
  },
  "author": {
    "name": "Vladimir Kucherenko",
    "email": "kvsoftware@gmail.com"
  },
  "contributors": [
    {
      "name": "Bruce MacNaughton",
      "email": "bmacnaughton@gmail.com"
    }
  ],
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha --reporter spec",
    "coverage": "istanbul cover node_modules/mocha/bin/_mocha -- -R dot",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R dot && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "dependencies": {
    "slash": "^1.0.0",
    "through2": "^0.6.1"
  },
  "devDependencies": {
    "coveralls": "^2.11.1",
    "event-stream": "^3.2.2",
    "gulp-util": "^3.0.3",
    "istanbul": "^0.3.5",
    "mocha": "^2.1.0"
  },
  "license": "MIT",
  "readme": "# gulp-html-replace [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url]\n\n> Replace build blocks in HTML. Like useref but done right.\nÂ \n\n### Table of Contents\n\n- [Usage](#usage)\n- [API](#api)\n- [Example](#example)\n- [Upgrade](#upgrade)\n\n\n## Usage\nInstall:\n```shell\nnpm install --save-dev gulp-html-replace\n```\n\nPut some blocks in your HTML file:\n```html\n<!-- build:<name> -->\nEverything here will be replaced\n<!-- endbuild -->\n```\n`name` is the name of the block. Could consist of letters, digits, underscore ( **_** ) and hyphen ( **-** ) symbols.\n\n## API\n### htmlreplace(tasks, options)\n\n#### tasks\nType: `Object` `{task-name: replacement}`\n\n* **task-name** - The name of the block in your HTML.\n* **replacement** - `String|Array|Object` The replacement. See examples below.\n\n###### Simple example:\n```javascript\n// Options is a single string\nhtmlreplace({js: 'js/main.js'})\n\n// Options is an array of strings\nhtmlreplace({js: ['js/monster.js', 'js/hero.js']})\n```\n>If your options strings ends with `.js` or `.css` they will be replaced by correct script/style tags, so you don't need to specify a template like in the example below.\n\n###### Advanced example:\n```javascript\n// Options is an object\nhtmlreplace({\n  js: {\n    src: 'img/avatar.png',\n    tpl: '<img src=\"%s\" align=\"left\" />'\n  }\n})\n\n// Multiple tag replacement\nhtmlreplace({\n  js: {\n    src: [['data-main.js', 'require-src.js']],\n    tpl: '<script data-main=\"%s\" src=\"%s\"></script>'\n  }\n})\n```\n* **src** - `String|Array` Same thing as in simple example.\n* **tpl** - `String` Template string. Uses [util.format()](http://nodejs.org/api/util.html#util_util_format_format) internally.\n\n> In the first example `%s` will be replaced with `img/avatar.png` producing `<img src=\"img/avatar.png\" align=\"left\">` as the result.\n\n> In the second example `data-main=\"%s\"` and `src=\"%s\"` will be replaced with `data-main.js` and `require-src.js` accordingly, producing `<script data-main=\"data-main.js\" src=\"require-src.js\"></script>` as the result\n\n###### Extended replacements:\n```javascript\n// Replacement based on the file being processed\nhtmlreplace({\n  js: {\n    src: null,\n    tpl: '<script src=\"%f\".js></script>'\n  }\n})\n// Extended replacement combined with standard replacement\nhtmlreplace({\n  js: {\n    src: 'dir',\n    tpl: '<script src=\"%s/%f\".js\"></script>'\n  }\n})\n\n```\n* **src** - `null|String|Array` Same as examples above but null if there are no standard replacements in the template.\n* **tpl** - `String` Template string. Extended replacements do not use `util.format()` and are performed before standard replacements.\n\n> In the first example `src` is null because there are no standard replacements. `%f` is replaced with the name (without extension) of the file currently being processed. If the file being processed is `xyzzy.html` the result is `<script src=\"xyzzy.js\"></script>`.\n\n> In the second example `src` has been set to the string `'dir'`. Extended replacements are processed first, replacing `%f` with `xyzzy`, then `%s` will be replaced with `dir` resulting in `<script src=\"dir/xyzzy.js\"></script>`.\n\nValid extended replacements are:\n\n* **%f** - this will be replaced with the filename, without an extension.\n* **%e** - this will be replaced with the extension including the `.` character.\n\n#### options\nType: `object`\n\nAll `false` by default.\n\n- {Boolean} **keepUnassigned** - Whether to keep blocks with unused names or remove them.\n- {Boolean} **keepBlockTags** - Whether to keep `<!-- build -->` and `<!-- endbuild -->` comments or remove them.\n- {Boolean} **resolvePaths** - Try to resolve *relative* paths. For example if your `cwd` is ``/``, your html file is `/page/index.html` and you set replacement as `lib/file.js` the result path in that html will be `../lib/file.js`\n\n## Example\nindex.html:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n\n    <!-- build:css -->\n    <link rel=\"stylesheet\" href=\"css/normalize.css\">\n    <link rel=\"stylesheet\" href=\"css/main.css\">\n    <!-- endbuild -->\n\n    </head>\n    <body>\n\n    <!-- build:js -->\n    <script src=\"js/player.js\"></script>\n    <script src=\"js/monster.js\"></script>\n    <script src=\"js/world.js\"></script>\n    <!-- endbuild -->\n```\n\ngulpfile.js:\n\n```javascript\nvar gulp = require('gulp');\nvar htmlreplace = require('gulp-html-replace');\n\ngulp.task('default', function() {\n  gulp.src('index.html')\n    .pipe(htmlreplace({\n        'css': 'styles.min.css',\n        'js': 'js/bundle.min.js'\n    }))\n    .pipe(gulp.dest('build/'));\n});\n```\n\nResult:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n\n    <link rel=\"stylesheet\" href=\"styles.min.css\">\n\n    </head>\n    <body>\n\n    <script src=\"js/bundle.min.js\"></script>\n```\n\n## Upgrade\n\n### From 0.x to 1.x\n>This version introduces streaming support, less confusing API, new option *keepUnused* and full code overhaul.\n* If you used single task like this: `htmlreplace('js', 'script.js')` just change it to `htmlreplace({js: 'script.js'})`\n* If you used single task with template: `htmlreplace('js', 'script.js', '<script=\"%s\">')` change it to `htmlreplace({js: {src: 'script.js', tpl: '<script=\"%s\">'})`\n* `files` renamed to `src`, see previous example. Rename if needed.\n\n### From 1.1.x to 1.2.x\n>This version switches to the new way of specifying options which is more future-proof. Before it was `htmlreplace(tasks, keepUnassigned = false)`, now it's `htmlreplace(tasks, {keepUnassigned: false})`.\nNo action required, old syntax will still work, but it is advisable to switch to the new syntax.\n\n[npm-url]: https://npmjs.org/package/gulp-html-replace\n[npm-image]: http://img.shields.io/npm/v/gulp-html-replace.svg\n[travis-url]: https://travis-ci.org/VFK/gulp-html-replace\n[travis-image]: http://img.shields.io/travis/VFK/gulp-html-replace.svg\n[coveralls-url]: https://coveralls.io/r/VFK/gulp-html-replace?branch=master\n[coveralls-image]: http://img.shields.io/coveralls/VFK/gulp-html-replace.svg\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/VFK/gulp-html-replace/issues"
  },
  "homepage": "https://github.com/VFK/gulp-html-replace#readme",
  "_id": "gulp-html-replace@1.4.5",
  "_from": "gulp-html-replace@>=1.4.4 <2.0.0"
}
